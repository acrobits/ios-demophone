/*
 * 
 * demophoneAppDelegate.h
 * demophone
 * 
 * Created by jiri on 3/28/10.
 * Copyright (c) 2022 Acrobits, s.r.o. All rights reserved.
 * 
 */

/*! @mainpage Demophone - an example integration of Acrobits Softphone SDK for iOS
 *
 * @section intro_sec Introduction
 * Demophone app is a simple GUI which demonstrates how to integrate the SDK in an application
 * and gives access to most features of the sdk, expecially:
 * - SIP account configuration and registration
 * - voice calls
 * - video calls
 * - messaging
 * - voicemail indication
 * - etc...
 * @section main_components Main Components
 * - @ref demophoneAppDelegate The AppDelegate
 * - @ref RegViewController Account Controller
 * - @ref CallViewController Call View Controller
 * - @ref VideoViewController Video View Controller
 * - @ref SoftphoneObserverProxy Proxy class between C++ and Objective C++
 *
 * @section on_startup On Startup
 * On startup, the following important steps are taken to initialize libsoftphone and use it with our example GUI:
 * @see demophoneAppDelegate#applicationDidFinishLaunching:
 * - we get the references to our three view controllers with GUI elements
 * - we create the main @ref Softphone::Instance and store the pointer to it. We change some configuration parameters and
 * signal that settings have been changed, so that libsoftphone can update its internal state
 * - we create the @ref SoftphoneObserverProxy with us as the @ref SoftphoneDelegate implementation and set it as
 * libsoftphone observer
 * - we initialize the extended interfaces InstanceEx and InstanceVideo, for InstanceEx we also set the observer.
 * - after setting up the GSM call watchdog, starting an example DNS SRV query and updating the libsoftphone foreground
 * state, we create a SIP account, set it as default and call updateAllAccounts, which tells libsoftphone to update the
 * agents which look after the account registration and other events. In our case, it will make the SIP account register.
 *
 * @section acct_notes Notes about using multiple accounts
 * The demophone app is designed as single-account application and it creates and maintains only one account with the
 * fixed ID "1". In order to support multiple account, some extra work is needed.
 * 
 * Whenever @ref updateAccount is called, the account XML passed to it is saved peristently. In case the passed XML 
 * contains the "id" attribute, like "<account id="12345">" and account with the same ID already exists, it is
 * overwritten, otherwise a new account is created. In case the "id" attribute is missing, a new unique ID will be
 * generated and new account is created. The id of the created or updated account is always returned.
 *
 * Multi-account app should first check whether any account exists on startup and let the user create one if not. Once
 * the account exists, it only needs to call @ref updateAccounts to make it register on startup and every time after
 * the account changes to make libsoftphone use the fresh version.
 *
 * When editing the account, the account XML should be obtained first, including the "id" attribute, edited while 
 * preserving the "id" and then saved under the same "id".
 */

#import <UIKit/UIKit.h>
#import <PushKit/PushKit.h>
#import <UserNotifications/UserNotifications.h>

#import "SoftphoneDelegate.h"

#import "Softphone/Softphone.h"
#import "Softphone/Softphone_iOS.h"

#include "SoftphoneObserverProxy.h"

@class RegViewController;
@class CallViewController;
@class VideoViewController;

/*! @class demophoneAppDelegate
 @brief The UIApplicationDelegate implementation for demophone. Holds the Softphone::Instance objects.
 
 The @ref demophoneAppDelegate class holds the @ref Softphone::Instance, @ref Softphone::InstanceEx and 
 @ref Softphone::InstanceVideo interfaces, which are the entry points for the libsoftphone library. 
 The app delegate also holds references to ViewControllres which define the GUI of the app and implements the 
 SoftphoneDelegate protocol, which receives callbackes about events generated by libsoftphone (call or registration
 state change, incoming calls etc.).
 
 This makes the class the central point of the application, responsible for updating GUI elements based on the 
 events from libsoftphone and calling libsoftphone API based on user commands received from GUI.
 
 */

//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
@interface demophoneAppDelegate : NSObject <UIApplicationDelegate, SoftphoneDelegate, Softphone_iOS_Delegate, PKPushRegistryDelegate, UNUserNotificationCenterDelegate>
//*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
{    
	Softphone::Instance *       _softphone;

    /// a C++ class which converts the callbacks into ObjectiveC selector invocations
	SoftphoneObserverProxy *    _softphoneObserverProxy;
    
    ali::xml::tree              _sipAccount;
    ali::xml::tree              _xmppAccount;
}

+ (demophoneAppDelegate *) theApp;

/// @brief Starts a new call to the given number, with desiredMedia from @ref currentDesiredMedia and through the current
/// default account
- (void) callNumber:(NSString *) number;

/// Hangs up the call with specified callEvent.
- (void) hangupCall:(Softphone::EventHistory::CallEvent::Pointer) callEvent;

/// Hangs up all calls in the specified group.
- (void) hangupGroup:(ali::string const&) groupId;

/// plays a wav file in place of a microphone
- (void) playSimulatedMic;

/// Mutes/unmutes the microphone.
- (void) toggleMute;

/// Sets speaker mode on/off.
- (void) toggleSpeaker;

/// @brief Makes the group active/inactive. Inactive group with only one call holds the call, in case there are more calls,
/// the device microphone is disconnected from the group, but audio is still mixed among the calls in the inactive group
- (void) toggleActiveGroup:(ali::string const&) groupId;

/// Holds/unholds the specified call.
- (void) toggleHoldForCall:(Softphone::EventHistory::CallEvent::Pointer) call;

/// @brief  Answers the specified incoming call, it's callId is typically received via
/// the @ref Instance::Calls::readIncomingCall, called in the handler of @ref SoftphoneDelegate::softphoneHasIncomingCall
- (void) answerIncomingCall:(Softphone::EventHistory::CallEvent::Pointer) call;

/// Rejects the incoming call with Busy
- (void) rejectIncomingCall:(Softphone::EventHistory::CallEvent::Pointer) call;

/// Should be called when the keypad key is touched.
- (void) dtmfOnForKey:(char) key;

/// Should be called when the keypad key is released.
- (void) dtmfOff;

/// Gets the current TrafficLog from libsoftphone and dumps it to the console.
- (void) dumpLog;

/// Sets up the SIP account with incoming calls enabled.
- (void) registerAccount;

/// Sets up the SIP account with incoming calls disabled.
- (void) unregisterAccount;

/// Sends an example text message to the recipient, using the currently configured account.
- (void) sendExampleSMSTo:(NSString *)recipient;

/// Sends an example text message with attachment to the recipient, using the currently configured account.
-(void)sendExampleSMSWithAttachmentTo:(NSString *)recipient;

/// Adds the call with callId into an existing group, creating a conference call.
- (void) joinCall:(Softphone::EventHistory::CallEvent::Pointer) call toGroup:(const ali::string &)group;

/// Removes the call with callId from a conference and turns it into a separate call.
- (void) splitCall:(Softphone::EventHistory::CallEvent::Pointer) call;

/// All calls in the group are made single, removing them from any conference call.
- (void) splitGroup:(ali::string const&) groupId;

/// Transfers the call to a number which is currently filled in in @ref RegViewController
- (void) transferCall:(Softphone::EventHistory::CallEvent::Pointer) callEvent;

/// Attended transfsfer the call with callId into otherCall
- (void) attendedTransferFromCall:(Softphone::EventHistory::CallEvent::Pointer) call
                               to:(Softphone::EventHistory::CallEvent::Pointer) otherCall;

-(Call::Statistics) getStatisticsForCall:(Softphone::EventHistory::CallEvent::Pointer) call;

- (void)applicationDidFinishLaunching:(UIApplication *)application;

@property (nonatomic, retain) UIWindow *            window;
@property (nonatomic, retain) UITabBarController *  tabcon;

/// ViewController responsible for account management and registration.
@property (nonatomic, retain) RegViewController *   regViewController;

/// ViewController responsible for call management.
@property (nonatomic, retain) CallViewController *  callViewController;

#ifdef SOFTPHONE_VIDEO
/// ViewController responsible for displaying video and camera controls.
@property (nonatomic, retain) VideoViewController * videoViewController;
#endif

/// instance of Softphone interface.
@property (nonatomic, readonly) Softphone::Instance *       softphone;

/// remembers whether the calls should be voice-only or voice+video.
@property (nonatomic, readonly) Call::DesiredMedia          currentDesiredMedia;

@end

